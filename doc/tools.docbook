<?xml version='1.0' encoding='UTF-8'?>

<chapter id="tools">
  <title>Tools</title>

<!-- The tool Versions is not part of released versions,
just used for development, so no need to document it. -->

<sect1 id="tools-overview">

  <title>Overview</title>
  <para>&okteta; brings some tools, some to analyze and manipulate the byte arrays
  and some with more general purpose. These tools can be activated or deactivated from
  the <guimenu>Tools</guimenu> entry in the menu bar. Each tool has a small view,
  which docks either in one of the sidebars or freely floats as a window. You
  can dock, undock, rearrange and also stack the tool views with the mouse, by
  pressing the &LMB; on the title bar of a tool view, moving it as you like and
  releasing the &LMB; to complete the action, otherwise cancel it by pressing
  the &Esc; key.</para>

<sect2>
  <title>Analyzers and Manipulators</title>
<variablelist>
  <varlistentry>
    <term>Byte Table</term>
    <listitem><para>The table lists all possible byte values, both as character and
    numerical value.</para>
    <para>The selected value can be inserted at the cursor position for a
    defined number of bytes. This can be achieved by using the <guibutton>Insert</guibutton>
    button or double-clicking the line in the table.</para></listitem>
  </varlistentry>

  <varlistentry>
    <term>Binary Filter</term>
    <listitem><para>The filter performs binary operations on the selected bytes.
    After choosing the operation (AND, OR, ROTATE..) the parameters,
    if any, can be set in the box below. The filter is executed on the use
    of the <guibutton>Filter</guibutton> button.</para></listitem>
  </varlistentry>

  <varlistentry>
    <term>Strings</term>
    <listitem><para>This tool locates the strings in the selected bytes.
    After choosing the minimum string length, the strings are grepped for
    on the use of the <guibutton>Extract</guibutton> button.
    The list of the strings displayed can be narrowed by entering a
    filter term.</para></listitem>
  </varlistentry>

  <varlistentry>
    <term>Statistics</term>
    <listitem><para>This tool builds a statistic for the selected bytes.
    The statistic gives the frequency of the occurrence of each byte value
    in the selection.
    It can be calculated by using the <guibutton>Build</guibutton>
    button.</para></listitem>
  </varlistentry>

  <varlistentry>
    <term>Checksum</term>
    <listitem><para>This tool calculates various checksums or hashsums for the
    selected bytes. After choosing the algorithm and setting the parameter, if
    any, the sum is computed on the use of the <guibutton>Calculate</guibutton>
    button.</para></listitem>
  </varlistentry>

  <varlistentry>
    <term>Decoding Table</term>
    <listitem><para>The table displays the values of the byte or the bytes
    starting at the cursor for some common simple data types like Integer or
    Float, but also UTF-8. Double-clicking on a line in the table opens an
    editor, so the value can be edited and changed.</para></listitem>
  </varlistentry>

  <varlistentry>
    <term>Structures</term>
    <listitem><para>This tool enables investigating and editing of byte arrays
    based on user-creatable structure definitions. Detailed instructions are in
    an own <link linkend="tools-structures">section</link>.</para></listitem>
  </varlistentry>
</variablelist>
</sect2>

<sect2>
  <title>General tools</title>
<variablelist>
  <varlistentry>
    <term>Filesystem</term>
    <listitem><para>This tool offers an embedded file browser which
    can be used to select files to open.</para></listitem>
  </varlistentry>

  <varlistentry>
    <term>Documents</term>
    <listitem><para>This tool shows all currently created or loaded files.
    Symbols mark the file with the currently active view and also show which
    files have unsaved changes or which storage copy has been modified by
    another program.</para></listitem>
  </varlistentry>

  <varlistentry>
    <term>Bookmarks</term>
    <listitem><para>This tool can be used to manage the bookmark, alternatively
    to the <link linkend="bookmarks-menu"><guimenu>Bookmarks</guimenu> menu</link>.
    <note><para>Bookmarks are currently only transient and not saved if you
    close a byte array or the whole program.</para></note></para></listitem>
  </varlistentry>

  <varlistentry>
    <term>File Info</term>
    <listitem><para>This tool displays some information about the current file,
    including its type, the location of storage and the size.</para></listitem>
  </varlistentry>
</variablelist>
</sect2>

</sect1>


<sect1 id="tools-structures">

    <title>Structures Tool</title>

    <sect2>
      <title>General</title>
      <para>The Structures Tool gives an overview of more or less complex data structures,
     including arrays, structures, unions, primitive types and enum values.
     <!-- explain/link what these types are? probably not, since most user will be programmers? -->
     Various options, like the style (decimal, hexadecimal or binary) in which values are displayed. Moreover it is possible to choose
      which structure definitions get loaded and which structures are shown in the view can be reached by pressing the
     <guibutton>Settings</guibutton> button. These structures must be defined by an &okteta; structure
      definition file (which is a &XML; file). Once such a structure definition has been installed,
       it may be selected and used.</para>
    </sect2>

    <sect2>
      <title>Installing structures</title>
      <para>Currently there is no way to automatically install a structure definition,
           it must be installed manually by copying the files of a structure definition
           to the appropriate directory. A structure definition consists of a <literal role="extension">.osd</literal>
           file describing the structure and a <literal role="extension">.desktop</literal> file containing metadata about that structure
           such as author, homepage and license. These two files must be copied to a new subdirectory of
            <filename class="directory">`kde4-config --localprefix`share/apps/okteta/structures/</filename> (if it does not exist yet create it first)
      </para>
    </sect2>

    <sect2>
      <title>Using new structures</title>
      <para>
      After these two files have been copied to correct directory, say <filename class="directory">`kde4-config --localprefix`share/apps/okteta/structures/simplestruct/</filename> (see the example for creating new structures)
      start &okteta; and then open the struct view settings. There select the <guilabel>Structures Management</guilabel> tab and make sure the wanted structure is checked. Then
      press <guibutton>Apply Changes</guibutton>, open the <guilabel>Structures</guilabel> tab and make sure the desired element is on the right-hand side.
    </para>
    </sect2>

    <sect2>
      <title>Creating your own structures</title>

      <sect3>
        <title>A first structure</title>
        <para>
          To start we create a very simple test structure containing only integral data types (one char and one 32 bit int), which would be expressed in C/C++ as:
          <screen>
          struct simple {
            char aChar;
            int anInt;
          };
          </screen>
          The first step to create this structure so it can be used by the structures tool is creating the
          <literal role="extension">.osd</literal> file
          which we will call <filename>simplestruct.osd</filename>.
          The structure would be expressed as such in an <literal role="extension">.osd</literal> file (which is just a plain &XML; file):
          <screen><markup>
          &lt;?xml version="1.0" encoding="UTF-8"?&gt;
          &lt;data&gt;
            &lt;struct name="simple"&gt;
              &lt;primitive name="aChar" type="Char"/&gt;
              &lt;primitive name="anInt" type="Int32"/&gt;
            &lt;/struct&gt;
          &lt;/data&gt;
          </markup></screen>
          which is fairly similar to the C/C++ definition.
          The type attribute can be any of the following:</para>
          <simplelist><member>Char</member>
          <member>Int8</member>
          <member>UInt8</member>
          <member>Int16</member>
          <member>UInt16</member>
          <member>Int32</member>
          <member>UInt32</member>
          <member>Int64</member>
          <member>UInt64</member>
          <member>Float</member>
          <member>Double</member>
          <member>Bool8</member>
          <member>Bool16</member>
          <member>Bool32</member>
          <member>Bool64</member>
          </simplelist>
          <para>
          The next step is to create the <literal role="extension">.desktop</literal> file for the metadata, which is just a set of key-value pairs. This should be named <filename>simplestruct.desktop</filename>.
          In this example it looks as such:
          <screen>
          [Desktop Entry]
          Encoding=UTF-8
          Icon=arrow-up
          Type=Service
          ServiceTypes=KPluginInfo

          Name=Simple test structure
          Comment=A very simple test structure containing only two items

          X-KDE-PluginInfo-Author=Alex Richardson
          X-KDE-PluginInfo-Email=alex.richardson@gmx.de
          X-KDE-PluginInfo-Name=simplestruct
          X-KDE-PluginInfo-Version=1.0
          X-KDE-PluginInfo-Website=http://www.plugin.org/
          X-KDE-PluginInfo-Category=structure
          X-KDE-PluginInfo-License=LGPL
          X-KDE-PluginInfo-EnabledByDefault=false
          </screen>
          These fields should all be pretty much self-explanatory, execpt for <literal>X-KDE-PluginInfo-Name</literal>
          which must always have the name of the <literal role="extension">.osd</literal> file as the value (without the <literal role="extension">.osd</literal> suffix),
          because otherwise the structure will not be usable by &okteta;. Now copy these files to the appropriate directory
          and it will be usuable in &okteta;.
        </para>
      </sect3>
      <sect3>
        <title>More complex structures</title>
        <para>
        Next we create a more complex structure which we will call complex and save in a file called <filename>complex.osd</filename>.
        This structure will contain two arrays (one with fixed length and one where the length is determined at runtime)
        as well as a nested structure and a union.

        <screen><markup>
          &lt;?xml version="1.0" encoding="UTF-8"?&gt;
          &lt;data&gt;
            &lt;struct name="complex"&gt;
              &lt;primitive name="size" type="UInt8" /&gt;
              &lt;union name="aUnion"&gt;
                &lt;array name="fourBytes" length="4"&gt;
                  &lt;primitive type="Int8" /&gt;
                &lt;/array&gt;
              &lt;/union&gt;
              &lt;struct name="nested"&gt;
                &lt;array name="string" length="size"&gt; &lt;!-- references the field size above --&gt;
                  &lt;primitive type="Char" /&gt;
                &lt;/array&gt;
              &lt;/struct&gt;
            &lt;/struct&gt;
          &lt;/data&gt;
          </markup></screen>
          This would correspond to the following in pseudo C/C++
          <screen>
          struct complex {
            uint8_t size;
            union aUnion {
              int8_t fourBytes[4];
            };
            struct nested {
              char string[size] //not valid C++, references value of the uint8 size
            };
          };
          </screen>
	  </para>
          <note><para> You can obviously only have dynamic length arrays reference fields before the array.</para></note>
          <para>
          Next we create the <filename>complex.desktop</filename> file just as above (make sure you set <literal>X-KDE-PluginInfo-Name</literal> correctly) and then install both files.
          </para>
      </sect3>
      <sect3>
        <title>Further information</title>
        <para>
          A few example structure definitions can be found <ulink url="http://websvn.kde.org/branches/KDE/4.4/kdeutils/okteta/kasten/controllers/view/structures/schema/example/">here.</ulink>
          This include for example the file header for PNG files.
          An &XML; schema describing the structure of the <literal role="extension">.osd</literal> file can be found  <ulink url="http://websvn.kde.org/branches/KDE/4.4/kdeutils/okteta/kasten/controllers/view/structures/schema/">here.</ulink>
          If more information is needed feel free to contact me at &Alex.Richardson.email;
        </para>
      </sect3>
    </sect2>
</sect1>

</chapter>
