<?xml version='1.0' encoding='UTF-8'?>

<chapter id="tools">
  <title>Tools</title>

<!-- The tool Versions is not part of released versions,
just used for development, so no need to document it. -->

<sect1 id="tools-overview">

  <title>Overview</title>
  <para>&okteta; brings some tools, some to analyze and manipulate the byte arrays
  and some with more general purpose. These tools can be activated or deactivated from
  the <guimenu>Tools</guimenu> entry in the menu bar. Each tool has a small view,
  which docks either in one of the sidebars or freely floats as a window. You
  can dock, undock, rearrange and also stack the tool views with the mouse, by
  pressing the &LMB; on the title bar of a tool view, moving it as you like and
  releasing the &LMB; to complete the action, otherwise cancel it by pressing
  the &Esc; key.</para>

<sect2>
  <title>Analyzers and Manipulators</title>
<variablelist>
  <varlistentry>
    <term>Byte Table</term>
    <listitem><para>The table lists all possible byte values, both as character and
    numerical value.</para>
    <para>The selected value can be inserted at the cursor position for a
    defined number of bytes. This can be achieved by using the <guibutton>Insert</guibutton>
    button or double-clicking the line in the table.</para></listitem>
  </varlistentry>

  <varlistentry>
    <term>Binary Filter</term>
    <listitem><para>The filter performs binary operations on the selected bytes.
    After choosing the operation (AND, OR, ROTATE..) the parameters,
    if any, can be set in the box below. The filter is executed on the use
    of the <guibutton>Filter</guibutton> button.</para></listitem>
  </varlistentry>

  <varlistentry>
    <term>Strings</term>
    <listitem><para>This tool locates the strings in the selected bytes.
    After choosing the minimum string length, the strings are grepped for
    on the use of the <guibutton>Extract</guibutton> button.
    The list of the strings displayed can be narrowed by entering a
    filter term.</para></listitem>
  </varlistentry>

  <varlistentry>
    <term>Statistics</term>
    <listitem><para>This tool builds a statistic for the selected bytes.
    The statistic gives the frequency of the occurrence of each byte value
    in the selection.
    It can be calculated by using the <guibutton>Build</guibutton>
    button.</para></listitem>
  </varlistentry>

  <varlistentry>
    <term>Checksum</term>
    <listitem><para>This tool calculates various checksums or hashsums for the
    selected bytes. After choosing the algorithm and setting the parameter, if
    any, the sum is computed on the use of the <guibutton>Calculate</guibutton>
    button.</para></listitem>
  </varlistentry>

  <varlistentry>
    <term>Decoding Table</term>
    <listitem><para>The table displays the values of the byte or the bytes
    starting at the cursor for some common simple data types like Integer or
    Float, but also UTF-8. Double-clicking on a line in the table opens an
    editor, so the value can be edited and changed.</para></listitem>
  </varlistentry>

  <varlistentry>
    <term>Structures</term>
    <listitem><para>This tool enables investigating and editing of byte arrays
    based on user-creatable structure definitions. Detailed instructions are in
    an own <link linkend="tools-structures">section</link>.</para></listitem>
  </varlistentry>
</variablelist>
</sect2>

<sect2>
  <title>General tools</title>
<variablelist>
  <varlistentry>
    <term>Filesystem</term>
    <listitem><para>This tool offers an embedded file browser which
    can be used to select files to open.</para></listitem>
  </varlistentry>

  <varlistentry>
    <term>Documents</term>
    <listitem><para>This tool shows all currently created or loaded files.
    Symbols mark the file with the currently active view and also show which
    files have unsaved changes or which storage copy has been modified by
    another program.</para></listitem>
  </varlistentry>

  <varlistentry>
    <term>Bookmarks</term>
    <listitem><para>This tool can be used to manage the bookmark, alternatively
    to the <link linkend="bookmarks-menu"><guimenu>Bookmarks</guimenu> menu</link>.
    <note><para>Bookmarks are currently only transient and not saved if you
    close a byte array or the whole program.</para></note></para></listitem>
  </varlistentry>

  <varlistentry>
    <term>File Info</term>
    <listitem><para>This tool displays some information about the current file,
    including its type, the location of storage and the size.</para></listitem>
  </varlistentry>
</variablelist>
</sect2>

</sect1>


<sect1 id="tools-structures">

    <title>Structures Tool</title>

    <sect2>
      <title>General</title>

      <para>The Structures tool enables investigating and editing of byte arrays
      based on user-creatable structure definitions, which can be built from
      arrays, unions, primitive types and enum values.</para>
     <!-- explain/link what these types are? probably not, since most user will be programmers? -->
      <para>It has an own settings dialog, which can be reached by using the
      <guibutton>Settings</guibutton> button. There various options can be
      configured, like the style (decimal, hexadecimal or binary) in which the
      values are displayed. Moreover it is possible to choose which structure
      definitions get loaded and which structures are shown in the view.</para>
      <para>Structures are defined in &okteta; Structure Definition files (based
      on &XML;, with the file extension <literal role="extension">.osd</literal>).
      Additionally a <literal role="extension">.desktop</literal> file contains
      metadata about that structure description file, such as author, homepage
      and license.</para>
      <para>Currently there is no built-in support for creating, editing or
      installing structure definitions, so this must be done manually like
      described in the next sections.</para>
    </sect2>

    <sect2>
      <title>Installing structure definitions</title>

      <para>The Structures tool looks for structure descriptions in the
      subdirectory <filename class="directory">share/apps/okteta/structures/</filename>
      of the user's directory for program data (find that by executing `kde4-config --localprefix`).
      You may need to create this directory if there are not any structure
      definitions installed yet.</para>
      <para>In that subdirectory there is an own subdirectory for each structure
      definition, which contains both the <literal role="extension">.desktop</literal>
      file and the <literal role="extension">.osd</literal> file of that definition.</para>
      <para>E.g. with the program data directory <filename class="directory">.kde</filename>
      and a structure definition named ExampleStructure there is the directory
      <filename class="directory">.kde/share/apps/okteta/structures/ExampleStructure</filename>,
      which contains a file <filename>ExampleStructure.desktop</filename> and a
      file <filename>ExampleStructure.osd</filename>.</para>
      <para>If you have installed a new structure definition by creating such a
      subdirectory with the two files or edited them, you need to restart &okteta;
      and open the settings dialog of the Structure tool. There select the
      <guilabel>Structures Management</guilabel> tab and make sure the relevant
      structure definition is checked. Then use the button <guibutton>Apply
      Changes</guibutton>, switch to the <guilabel>Structures</guilabel> tab and
      make sure the desired element is listed on the right-hand side.</para>
    </sect2>

    <sect2>
      <title>Sharing structure definitions</title>
      <para>For common structures you may not need to create a definition yourself,
      but instead can reuse one somebody else is sharing in places like
      <ulink url="http://kde-files.org/index.php?xcontentmode=691">kde-files.org</ulink>.</para>
      <para>You also may want to share a definition yourself. To do so, create a
      file archive (e.g. a zipped tar archive, <literal role="extension">.tgz</literal>)
      from just the subdirectory containing the <literal role="extension">.osd</literal>
      file and the <literal role="extension">.desktop</literal> file. From the
      example in the last section this would be the subdirectory
      <filename class="directory">ExampleStructure</filename>. With this format
      future versions of the Structure tool will be able to provide automatical
      download and install of these definitions.</para>
    </sect2>

    <sect2>
      <title>Creating your own structure definitions</title>

      <sect3>
        <title>A first structure definition</title>
        <para>
          To start we create a definition for a very simple test structure
          containing only integral data types (one char and one 32-bit int).
          They would be expressed in C/C++ as:
          <screen>
          struct simple {
            char aChar;
            int anInt;
          };
          </screen>
          The first step is writing the <literal role="extension">.osd</literal> file,
          which we will call <filename>simplestruct.osd</filename>:
          <screen><markup>
          &lt;?xml version="1.0" encoding="UTF-8"?&gt;
          &lt;data&gt;
            &lt;struct name="simple"&gt;
              &lt;primitive name="aChar" type="Char"/&gt;
              &lt;primitive name="anInt" type="Int32"/&gt;
            &lt;/struct&gt;
          &lt;/data&gt;
          </markup></screen>
          which is fairly similar to the C/C++ definition.
          The type attribute can be any of the following:</para>
          <simplelist>
          <member>Char</member>
          <member>Int8</member>
          <member>UInt8</member>
          <member>Int16</member>
          <member>UInt16</member>
          <member>Int32</member>
          <member>UInt32</member>
          <member>Int64</member>
          <member>UInt64</member>
          <member>Float</member>
          <member>Double</member>
          <member>Bool8</member>
          <member>Bool16</member>
          <member>Bool32</member>
          <member>Bool64</member>
          </simplelist>
          <para>
          The next step is writing the <literal role="extension">.desktop</literal>
          file for the metadata, which is just a set of key-value pairs. It
          should be named <filename>simplestruct.desktop</filename>.
          In this example it looks as such:
          <screen>
          [Desktop Entry]
          Encoding=UTF-8
          Icon=arrow-up
          Type=Service
          ServiceTypes=KPluginInfo

          Name=Simple test structure
          Comment=A very simple test structure containing only two items

          X-KDE-PluginInfo-Author=Alex Richardson
          X-KDE-PluginInfo-Email=alex.richardson@gmx.de
          X-KDE-PluginInfo-Name=simplestruct
          X-KDE-PluginInfo-Version=1.0
          X-KDE-PluginInfo-Website=http://www.plugin.org/
          X-KDE-PluginInfo-Category=structure
          X-KDE-PluginInfo-License=LGPL
          X-KDE-PluginInfo-EnabledByDefault=false
          </screen>
          These fields should all be pretty much self-explanatory, except for
          <literal>X-KDE-PluginInfo-Name</literal>. This one must have the name
          of the <literal role="extension">.osd</literal> file as its value
          (without the <literal role="extension">.osd</literal> suffix).</para>
          <para>Now create a subdirectory <filename class="directory">simplestruct</filename>
          as described above, copy the two files to this directory, and restart
          &okteta;.</para>
      </sect3>
      <sect3>
        <title>More complex structures</title>
        <para>
        Next we create a definition of a more complex structure which we will
        call "complex" and save in a file named <filename>complex.osd</filename>.
        This structure will contain two arrays (one with fixed length and one
        where the length is determined at runtime) as well as a nested structure
        and a union.
        <screen><markup>
          &lt;?xml version="1.0" encoding="UTF-8"?&gt;
          &lt;data&gt;
            &lt;struct name="complex"&gt;
              &lt;primitive name="size" type="UInt8" /&gt;
              &lt;union name="aUnion"&gt;
                &lt;array name="fourBytes" length="4"&gt;
                  &lt;primitive type="Int8" /&gt;
                &lt;/array&gt;
              &lt;/union&gt;
              &lt;struct name="nested"&gt;
                &lt;array name="string" length="size"&gt; &lt;!-- references the field size above --&gt;
                  &lt;primitive type="Char" /&gt;
                &lt;/array&gt;
              &lt;/struct&gt;
            &lt;/struct&gt;
          &lt;/data&gt;
          </markup></screen>
          This would correspond to the following in pseudo C/C++
          <screen>
          struct complex {
            uint8_t size;
            union aUnion {
              int8_t fourBytes[4];
            };
            struct nested {
              char string[size] //not valid C++, references value of the uint8 size
            };
          };
          </screen>
          </para>
          <note><para>You can obviously only have dynamic length arrays
          reference fields before the array.</para></note>
          <para>Next we create the <filename>complex.desktop</filename> file just as
          in the example before (make sure you set <literal>X-KDE-PluginInfo-Name</literal>
          correctly) and also follow it for installing both files.</para>
      </sect3>
      <sect3>
        <title>Further information</title>
        <para>
          A few example structure definitions can be found <ulink url="http://websvn.kde.org/branches/KDE/4.4/kdeutils/okteta/kasten/controllers/view/structures/schema/example/">here.</ulink>
          This include for example the file header for PNG files.
          An &XML; schema describing the structure of the <literal role="extension">.osd</literal> file can be found  <ulink url="http://websvn.kde.org/branches/KDE/4.4/kdeutils/okteta/kasten/controllers/view/structures/schema/">here.</ulink>
          If more information is needed feel free to contact me at &Alex.Richardson.email;
        </para>
      </sect3>
    </sect2>
</sect1>

</chapter>
